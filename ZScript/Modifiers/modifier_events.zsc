// For Skull events
class BDPModifier_Events : EventHandler
{
	bool doOpenModifiers;
	int curleveltics;
	Array<BDPModifier> modifiers;
	
	static void getActiveModifiers(out Array<String> modNames)
	{	
		// Filter string CVar so we can cleanly pull skull class
		// names out of it.
		string activeMods = bdp_active_modifiers;
		activeMods = activeMods.MakeLower();
		activeMods.Filter();
		activeMods.Replace(" ", "");
		activeMods.Replace("\t", "");
		activeMods.Replace(String.Format("%c", 13), "");
		
		// Split filtered CVar into an array of skull classnames.
		activeMods.Split(modNames, ",");
	}
	
	static void checkModifierUnlocked(out Array<String> modNames)
	{	
		string unlockedMods = bdp_unlocked_modifiers;
		unlockedMods = unlockedMods.MakeLower();
		unlockedMods.Filter();
		unlockedMods.Replace(" ", "");
		unlockedMods.Replace("\t", "");
		unlockedMods.Replace(String.Format("%c", 13), "");
		
		// Split filtered CVar into an array of skull classnames.
		unlockedMods.Split(modNames, ",");
	}
	
	override void WorldTick()
	{	
		if( doOpenModifiers && curleveltics >= 2 ) 
		{
			//Menu.SetMenu("BDPModifierMenu");
			doOpenModifiers = false;
		}
	
		foreach(md : modifiers)
			if(md.enabled) md.WorldTick();
			
		curleveltics++;
	}
	override void WorldThingDied(WorldEvent e) 
	{
		foreach(md : modifiers)
			if(md.enabled) md.WorldThingDied(e);
	}
	override void WorldThingDamaged(WorldEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.WorldThingDamaged(e);
	}
	override void WorldLinePreActivated(WorldEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.WorldLinePreActivated(e);
	}
	override void PlayerRespawned (PlayerEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.PlayerRespawned(e);
	}
	override void PlayerEntered (PlayerEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.PlayerEntered(e);
	}
	override void PlayerDisconnected (PlayerEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.PlayerDisconnected(e);
	}
	override void RenderOverlay (RenderEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.RenderOverlay(e);
	}
	override void WorldThingSpawned(WorldEvent e)
	{
		foreach(md : modifiers)
			if(md.enabled) md.WorldThingSpawned(e);
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{	
	//	if(e.Name == "flag_openmodifiermenu") doOpenModifiers = true;
		if(e.Name == "flag_updatemodifierstatus") UpdateModifierStatus();
	}	
	
	void UpdateModifierStatus()
	{
		Array<String> activeMods;
		Array<String> unlockedMods;
		checkModifierUnlocked(unlockedMods);
		getActiveModifiers(activeMods);
		int MODNOTFOUND = activeMods.Size();
		int MODLOCKED = unlockedMods.Size();
		
		modifiers.Clear();	
		let it = ThinkerIterator.Create("BDPModifier");
		BDPModifier md;
		while(md = BDPModifier(it.Next())) 
		{
			string clsName = md.getClassName();
			clsName = clsName.MakeLower();
			
			if( (unlockedMods.Find(clsName) == MODLOCKED) && !bdp_modifiers_allunlocked )
				continue;
			
			if(activeMods.Find(clsName) != MODNOTFOUND)
				md.enabled = true;
				
			modifiers.Push(md);
		}
	}
	
	override void WorldLoaded (WorldEvent e)
	{	
		// Setup Modifiers
		curleveltics = 0;
		foreach(cls : AllActorClasses)
		{
			if( !(cls is "BDPModifier") || cls.getClassName() == "BDPModifier" ) continue;
			let md = BDPModifier(Actor.Spawn(cls));
			md.Init();
		}
		UpdateModifierStatus();
		
		foreach(md : modifiers)
			if(md.enabled) md.WorldLoaded(e);
	}
}
