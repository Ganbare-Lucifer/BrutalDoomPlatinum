

	
	class WeaponSpawnHandler : Staticeventhandler
	{
	
	Array<string >ShotGunCommon;
	Array<string >ShotGunUnCommon;
	Array<string >ShotGunRare;
	
	
	Array<string >SuperShotGunCommon;
	Array<string >SuperShotGunUnCommon;
	Array<string >SuperShotGunRare;
	
	
	Array<string >ChaingunCommon;
	Array<string >ChaingunUnCommon;
	Array<string >ChaingunRare;
	
	
	Array<string >ChainsawCommon;
	Array<string >ChainsawUnCommon;
	Array<string >ChainsawRare;
	
	
	Array<string >RocketLauncherCommon;
	Array<string >RocketLauncherUnCommon;
	Array<string >RocketLauncherRare;
	
	
	Array<string >PlasmaRifleCommon;
	Array<string >PlasmaRifleUnCommon;
	Array<string >PlasmaRifleRare;
	
	
	Array<string >BFGCommon;
	Array<string >BFGUnCommon;
	Array<string >BFGRare;
	


	
	
	
	override void onregister()
	{/*
	for(int i=0;i<allactorclasses.size();i++)
            {
				
					if(allactorclasses[i] is "weaponspawner")
					{
						String actortoadd = allactorclasses[i].getclassname();
						//A_log(weaponspawner(getdefaultbytype(allactorclasses[i])).type);
						String guntopush;
						String commontopush;
						guntopush = weaponspawner(getdefaultbytype(allactorclasses[i])).type;
						commontopush = weaponspawner(getdefaultbytype(allactorclasses[i])).rarity;
						String.format("%s%s", guntopush, commontopush)
						
						whattopush.push(actortoadd);
					}
				
            }
			*/
			
		//Thanks for the help 3saster!
		int currLump = Wads.FindLump("WeaponInfo",0,1);
		while( currLump != -1 )
		{
			addguns(currLump);
			currLump = Wads.FindLump("WeaponInfo",currLump+1,1);
		}
	}
		
		void addguns(int lump)
		{
		
			string data = Wads.ReadLump(lump);
			
			
			
			// This replaces Windows line endings with Linux line endings, helps avoid possible problems.
			data.replace("\r\n","\n");
			
			// This will return an array of strings, where each elements corresponds to each line
			Array<string> lines;
			data.Split(lines,"\n");
			
			// This will further split each line into pieces. This should give the idea as you described, you can modify as needed
			Array<string> weaponstr;
			Array<string> replacestr;
			Array<string> raritystr;
			
			for(int i=0; i<lines.Size(); i++)
			{
			
				Array<string> content;
				lines[i].Split(content,",");
				console.printf(lines[i]);
				If(content.size() >= 3)
				{
				weaponstr.push(content[0]);
				replacestr.push(content[1]);
				raritystr.push(content[2]);
				}
			
			}
			
			for(int i=0; i<weaponstr.Size(); i++)
			{
			
				If(replacestr[i] == "shotgun")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						shotguncommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "2")
					{
						
						shotgununcommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "3")
					{
						
						shotgunrare.push(weaponstr[i]);
					}
				}
				
				
				If(replacestr[i] == "chaingun")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						chainguncommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "2")
					{
						
						chaingununcommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "3")
					{
						
						chaingunrare.push(weaponstr[i]);
					}
				}
				
				
				If(replacestr[i] == "rocketlauncher")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						rocketlaunchercommon.push(weaponstr[i]);
					}
					if(raritystr[i] == "2")
					{
						console.printf("GAYGAYHOMOSEXUALGAY");
						rocketlauncheruncommon.push(weaponstr[i]);
					}
					if(raritystr[i] == "3")
					{
						console.printf("GAYGAYHOMOSEXUALGAY");
						rocketlauncherrare.push(weaponstr[i]);
					}
				}
				
				If(replacestr[i] == "plasmarifle")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						plasmariflecommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "2")
					{
						
						plasmarifleuncommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "3")
					{
						
						plasmariflerare.push(weaponstr[i]);
					}
				}
				
				If(replacestr[i] == "supershotgun")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						supershotguncommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "2")
					{
						
						supershotgununcommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "3")
					{
						
						supershotgunrare.push(weaponstr[i]);
					}
				}
				
				If(replacestr[i] == "chainsaw")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						chainsawcommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "2")
					{
						
						chainsawuncommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "3")
					{
						
						chainsawrare.push(weaponstr[i]);
					}
				}
				
				
				
				If(replacestr[i] == "bfg")
				{
				
				
					If(raritystr[i] == "1")
					{
						
						BFGcommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "2")
					{
						
						BFGuncommon.push(weaponstr[i]);
					}
					Else if(raritystr[i] == "3")
					{
						
						BFGrare.push(weaponstr[i]);
					}
				}
			}
		}
		
	
	
	
	
	
	override void CheckReplacement(ReplaceEvent e)
	{
	int rarity;
	//int raritygenerator = random(1,100);
	//if (raritygenerator > 65)
	//{
	//console.printf("fuck");
	//rarity = 1;
	//}
	//If (raritygenerator > 83)
	//{
	//console.printf("shit");
	//rarity = 2;
	//}

	rarity = randompick(0, 0, 0, 0, 0, 0, 1, 1, 1, 2);
	

	
		if (e.Replacee == "Shotgun") 
		{
			If(!rarity)
			{
				e.Replacement = (ShotGunCommon[random(0, ShotGunCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && ShotGunUnCommon.size() > 0)
			{
				e.Replacement = (ShotGunUnCommon[random(0, ShotGununCommon.Size()-1)]);
			}
			
			else If(rarity == 2 && ShotGunrare.size() > 0)
			{
				e.Replacement = (ShotGunrare[random(0, ShotGunrare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (ShotGunCommon[random(0, ShotGunCommon.Size()-1)]);
			}
		}
		
		
		if (e.Replacee == "rocketlauncher") 
		{
			If(!rarity)
			{
				e.Replacement = (rocketlauncherCommon[random(0, rocketlauncherCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && rocketlauncherUnCommon.size() > 0)
			{
				e.Replacement = (rocketlauncherUnCommon[random(0, rocketlauncherunCommon.Size()-1)]);
			}
	
			else If(rarity == 2 && rocketlauncherrare.size() > 0)
			{
				e.Replacement = (rocketlauncherrare[random(0, rocketlauncherrare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (rocketlauncherCommon[random(0, rocketlauncherCommon.Size()-1)]);
			}
		}
		
		
		if (e.Replacee == "supershotgun") 
		{
			If(!rarity)
			{
				e.Replacement = (supershotgunCommon[random(0, supershotgunCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && supershotgunUnCommon.size() > 0)
			{
				e.Replacement = (supershotgunUnCommon[random(0, supershotgununCommon.Size()-1)]);
			}
			
			else If(rarity == 2 && supershotgunrare.size() > 0)
			{
				e.Replacement = (supershotgunrare[random(0, supershotgunrare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (supershotgunCommon[random(0, supershotgunCommon.Size()-1)]);
			}
		}
		
		
		if (e.Replacee == "plasmarifle") 
		{
			If(!rarity)
			{
				e.Replacement = (plasmarifleCommon[random(0, plasmarifleCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && plasmarifleUnCommon.size() > 0)
			{
				e.Replacement = (plasmarifleUnCommon[random(0, plasmarifleunCommon.Size()-1)]);
			}
			
			else If(rarity == 2 && plasmariflerare.size() > 0)
			{
				e.Replacement = (plasmariflerare[random(0, plasmariflerare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (plasmarifleCommon[random(0, plasmarifleCommon.Size()-1)]);
			}
		}
		
		
		if (e.Replacee == "chainsaw")
		{
			If(!rarity)
			{
				e.Replacement = (chainsawCommon[random(0, chainsawCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && chainsawUnCommon.size() > 0)
			{
				e.Replacement = (chainsawUnCommon[random(0, chainsawunCommon.Size()-1)]);
			}
			
			else If(rarity == 2 && chainsawrare.size() > 0)
			{
				e.Replacement = (chainsawrare[random(0, chainsawrare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (chainsawCommon[random(0, chainsawCommon.Size()-1)]);
			}
		}
		
		
		if (e.Replacee == "chaingun") 
		{
			If(!rarity)
			{
				e.Replacement = (chaingunCommon[random(0, chaingunCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && chaingunUnCommon.size() > 0)
			{
				e.Replacement = (chaingunUnCommon[random(0, chaingununCommon.Size()-1)]);
			}
			
			else If(rarity == 2 && chaingunrare.size() > 0)
			{
				e.Replacement = (chaingunrare[random(0, chaingunrare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (chaingunCommon[random(0, chaingunCommon.Size()-1)]);
			}
		}
		
		
		if (e.Replacee == "BFG9000") 
		{
			If(!rarity)
			{
				e.Replacement = (BFGCommon[random(0, BFGCommon.Size()-1)]);
			}
			
			else If(rarity == 1 && BFGUnCommon.size() > 0)
			{
				e.Replacement = (BFGUnCommon[random(0, BFGunCommon.Size()-1)]);
			}
			
			else If(rarity == 2 && BFGrare.size() > 0)
			{
				e.Replacement = (BFGrare[random(0, BFGrare.Size()-1)]);
			}
			Else
			{
				e.Replacement = (BFGCommon[random(0, BFGCommon.Size()-1)]);
			}
		}
	
	}
	
	
	
	
	}
	
	
	
	
	Class BasicWeaponPickup : Health
{
default
{
 scale 0.8;
 radius 24;
 height 24;
 +FORCEXYBILLBOARD;
 -COUNTITEM;
 //+INVENTORY.ALWAYSPICKUP
 Inventory.Amount 0;
 Inventory.MaxAmount 99999;
 Inventory.PickupMessage "";
 Inventory.PickupSound "none";
 }
}


CLASS SSGSpawnerReplacer: BasicWeaponPickup// Replaces  SuperShotgun
{



    States
    {

	 Spawn:
		SGN2 A 0;
		XXXX X 0 A_JumpIf(GetCvar("bd_SpawnSSG")==0&&GetCvar("bd_SpawnASG")==0, "SpawnAmmo");
		MARN A 0 A_JumpIf(GetCvar("bd_disablenewguns")==1, "Vanilla");//Check if advanced decorations are disabled.
		TNT1 A 0 A_Jump(80, "Spawn2");
		
	Vanilla:	
	Spawn1:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(GetCvar("bd_SpawnSSG")==0, "Spawn");//Check if that weapon is disabled.
		TNT1 A 0 A_SpawnItemEx ("SSGSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL|SXF_TRANSFERAMBUSHFLAG,0, tid);
		TNT1 A 1;
		TNT1 A -1;
		Stop;
	
	 Spawn2:
		TNT1 A 0 A_JumpIf(GetCvar("bd_SpawnASG")==0, "Spawn1");//Check if that weapon is disabled.
		TNT1 A 0 A_SpawnItemEx ("AssaultShotgunSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL|SXF_TRANSFERAMBUSHFLAG,0, tid);
		TNT1 A 1;
		TNT1 A -1;
		Stop;
		
	MaybespawnPlasmashells:
		TNT1 A 0 A_jump(128,"continuespawn");
		TNT1 A 0 A_jumpifinventory("Plasmashells",1,"continuespawn",AAPTR_PLAYER1);
		TNT1 A 0 A_SpawnItemEx ("Plasmashellbox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL|SXF_TRANSFERAMBUSHFLAG,0, tid);
		TNT1 A 1;
		TNT1 A -1;
		Stop;
		
	MaybespawnDragon:
		TNT1 A 0 A_jump(128,"Spawngun");
		TNT1 A 0 A_jumpifinventory("dragonsbreathshells",1,"spawngun",AAPTR_PLAYER1);
		TNT1 A 0 A_SpawnItemEx ("dragonsbreathbox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL|SXF_TRANSFERAMBUSHFLAG,0, tid);
		TNT1 A 1;
		TNT1 A -1;
		Stop;
		
	SpawnAmmo:
		TNT1 A 0 A_SpawnItemEx ("AmmoShellBox",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL|SXF_TRANSFERAMBUSHFLAG,0, tid);
		TNT1 A 1;
		Stop;
}}
	
	
CLASS Plasmashellbox : custominventory
{
Default
{
translation "176:191=[153,50,204]:[0,0,0]";
Inventory.maxamount 1;
Inventory.pickupmessage "You got Plasma Shells for your Assault Shotgun!";
Inventory.Pickupsound "SHELPK2";
}
States
{
Spawn:
TNT1 A 0;
NULL A 0 A_jump(128,2);
	//NULL A 0 A_ChangeFlag("XFLIP",1);
	TNT1 A 0;
	    TNT1 A 0 A_Jump(256,"Spawn1","Spawn2","Spawn3","Spawn4","Spawn5");
		
	Spawn1:
		SBOX A -1;
		Stop;
		
	Spawn2:
		SBOX B -1;
		Stop;
		
	Spawn3:
		SBOX C -1;
		Stop;
		
	Spawn4:
		SBOX D -1;
		Stop;
		
	Spawn5:
		SBOX E -1;
		Stop;
		
	Pickup:
		TNT1 A 0 A_giveinventory("ammoshell",8);
		TNT1 A 0 A_giveinventory("plasmashells",1);
		STOP;
}
}


Class plasmashells : ammo
{
Default
{
Inventory.maxamount 1;
}
}

CLASS DragonsBreathbox : custominventory
{
Default
{
translation "168:191=208:223";
Inventory.maxamount 1;
Inventory.pickupmessage "You got Dragon's Breath Shells for your SuperShotgun!";
Inventory.Pickupsound "SHELPK2";
}
States
{
Spawn:
TNT1 A 0;
NULL A 0 A_jump(128,2);
	//NULL A 0 A_ChangeFlag("XFLIP",1);
	TNT1 A 0;
	    TNT1 A 0 A_Jump(256,"Spawn1","Spawn2","Spawn3","Spawn4","Spawn5");
		
	Spawn1:
		SBOX A -1;
		Stop;
		
	Spawn2:
		SBOX B -1;
		Stop;
		
	Spawn3:
		SBOX C -1;
		Stop;
		
	Spawn4:
		SBOX D -1;
		Stop;
		
	Spawn5:
		SBOX E -1;
		Stop;
		
	Pickup:
		TNT1 A 0 A_giveinventory("ammoshell",8);
		TNT1 A 0 A_giveinventory("dragonsbreathshells",1);
		STOP;
}
}


Class dragonsbreathshells : ammo
{
Default
{
Inventory.maxamount 1;
}
}
	
	
	
	