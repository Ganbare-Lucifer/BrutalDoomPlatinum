CLASS Tenderizer : Brutalweapon
{
	Default
	
	{
	Weapon.AmmoUse1 0;
	Weapon.AmmoUse2 0;
	Weapon.AmmoGive1 100;
	Weapon.AmmoGive2 0;
	Weapon.AmmoType1 "SoulAmmo";
	Obituary "%o was tenderized by %k's Hammer.";
    Inventory.PickupSound "BDP/Weapon/Hammer/Select";
	Inventory.Pickupmessage "You got the Tenderizer! (Slot 1)";
	+WEAPON.NOAUTOAIM;
	+WEAPON.NOALERT;
	+WEAPON.EXPLOSIVE;
	brutalweapon.handedness 1;
	Weapon.SelectionOrder 1550;
	Inventory.AltHUDIcon "HAMPA0";
	BrutalWeapon.weight 7;
	}
	Bool previousgravity;
	Bool previousmissile;
	Bool previoussolid;
	bool previousxy;
	bool previousfriend;
	
	bool killyourself;
	
	Actor Grabbedactor;
	
	Int GrabbedTimer;
	
	Int TakeTeleportTimer;
	
	Actor Destination;
	
	BEAMZ_LaserBeam beam;
	
	override void DoEffect() 
	{
		super.DoEffect();
		
		TakeTeleportTimer++;
		
		If(taketeleporttimer >= 7)
		{
			owner.TakeInventory("TeleporterTimer",1);
			TakeTeleportTimer = 0;
			
		}
		If(owner.findinventory("TeleporterTimer") && owner.findinventory("Swapriflespecial") && owner.player.readyweapon is "tenderizer")
		{
			Owner.takeinventory("swapriflespecial",1);
			A_tryHammerTeleport();
		}
		
		If(!owner.findinventory("teleportertimer") && destination)
		{
			destination.setstatelabel("die");
		}
		
	}
	
		action void A_CheckGrab(double range, double ang)
			{	
				
				Vector3 viewPos = (pos.xy, player.viewz); // player view point
				Vector3 viewDir = (AngleToVector(angle, cos(pitch)), -sin(pitch)); // player view direction
				double maxAngle = cos(ang);
    
				let it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
						Actor mo;
					while (mo = Actor(it.Next()))
				{
					// get the object's bounding box
					Vector3 rel = mo.PosRelative(CurSector); // account for sector portals
					Vector3 minBox = rel - (mo.radius, mo.radius, 0);
					Vector3 maxBox = rel + (mo.radius, mo.radius, mo.height);
        
					// get the point on the box nearest the view point
					Vector3 nearest;
					nearest.x = max(minBox.x, min(viewPos.x, maxBox.x));
					nearest.y = max(minBox.y, min(viewPos.y, maxBox.y));
					nearest.z = max(minBox.z, min(viewPos.z, maxBox.z));
        
					Vector3 dir = nearest - viewPos;
					double dist = dir.Length();
					if (dist > 0)
					{
						if (dist > range) // is it in range?
						continue;
            
						if (viewDir dot (dir / dist) < maxAngle) // is it within an acceptable angle?
						continue;
						
				
					}
					If(mo.species == "marines")
						Continue;
					If(mo.bshootable || mo.bmissile)
					{
						If(mo.bspawnceiling || mo.health < 1 || mo is "headkicking" || mo is "BDECGRASS" || mo is "Brutal_Bloodspot")
						{
							Continue;
						}
						invoker.grabbedactor = mo;
					
					}
					Else
					{
						Continue;
					}
				// grab it
				break;
				}
			}
		action void A_DoHammer(double range, double ang, bool damaging = true, int damage = 500, string damagetype = "normal")
			{
				Vector3 viewPos = (pos.xy, player.viewz); // player view point
				Vector3 viewDir = (AngleToVector(angle, cos(pitch)), -sin(pitch)); // player view direction
				double maxAngle = cos(ang);

				let it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
						Actor mo;
					while (mo = Actor(it.Next()))
			{
				// get the object's bounding box
				Vector3 rel = mo.PosRelative(CurSector); // account for sector portals
				Vector3 minBox = rel - (mo.radius, mo.radius, 0);
				Vector3 maxBox = rel + (mo.radius, mo.radius, mo.height);

				// get the point on the box nearest the view point
				Vector3 nearest;
				nearest.x = max(minBox.x, min(viewPos.x, maxBox.x));
				nearest.y = max(minBox.y, min(viewPos.y, maxBox.y));
				nearest.z = max(minBox.z, min(viewPos.z, maxBox.z));

				Vector3 dir = nearest - viewPos;
				double dist = dir.Length();
				if (dist > 0)
				{
					if (dist > range) // is it in range?
						continue;

					if (viewDir dot (dir / dist) < maxAngle) // is it within an acceptable angle?
						continue;

					If (!invoker.owner.CheckSight(mo,SF_IGNOREWATERBOUNDARY))
						continue;

				}
					If(mo.species == "marines")
						Continue;
				If(mo.bshootable || mo.bmissile)
				{
					If(mo.bspawnceiling || mo.health < 1 || mo is "headkicking" || mo is "BDECGRASS" || mo is "Brutal_Bloodspot" || mo is "BaseHeadShot")
					{
						Continue;
					}
					
					Vector3 HammerCoords = LevelLocals.SphericalCoords(mo.pos,invoker.owner.pos);
					
					If(mo.bmissile)
					{
						actor PreviousTarget;
						If(mo.target)
						{
							previoustarget = mo.target;
						}
						mo.target = invoker.owner;
						mo.pitch = (mo.pitch - 180);
						mo.angle = (mo.angle - 180);
						mo.vel.x = -mo.vel.x;
						mo.vel.y = -mo.vel.y;
						mo.vel.z = -mo.vel.z;
						mo.giveinventory("grabberdamage",1);
						If(previousTarget)
						{
							mo.tracer = previoustarget;
						}
					}

					Else
					{
						

						mo.vel3dfromangle(25,invoker.owner.angleto(mo,TRUE),random(-20,-40));
						//mo.bblasted = true;
						If(damaging)
						{
							mo.damagemobj(invoker,invoker.owner,damage,damagetype,DMG_THRUSTLESS);
							If(!mo.bnoblood)
							{
								vector3 bloodspawn = mo.pos;
								bloodspawn.z = (bloodspawn.z + (mo.height * 0.5));
							
								Mo.spawnblood(bloodspawn,invoker.owner.angleto(mo,TRUE),1);
							}
						}
					}
					
				}
					Continue;

        // grab it
        break;
		}
	}
	Action State A_TryHammerTeleport()
	{
		If(Invoker.Destination)
		{
			
			invoker.owner.A_startsound("Weapons/Unmaker/UseTeleporter",6);
			vector3 SavedPos = invoker.owner.pos;
			float savedAngle = invoker.owner.angle;
			//invoker.owner.setorigin((invoker.Destination.pos - (0,0,64)),false);
			invoker.owner.teleportmove((invoker.Destination.pos - (0,0,64)),TRUE);
			invoker.owner.angle = invoker.destination.angle;
			Invoker.Destination.setstatelabel("die");
			let destination = spawn("HammerPortal",(savedpos + (0,0,64)));
			invoker.destination = destination;
			destination.angle = savedAngle;
			invoker.owner.A_giveinventory("teleportertimer",5);
			//invoker.owner.a_spawnitemex("teleportationfog");
			Return resolvestate("Ready");
		}
		Else
		{
			Return resolvestate("PlacePortal");
		}
	}
	States
	{

		GrenadeThrowFlash:
			HAMS DCBA 1;
			TNT1 A 24;
			HAMS ABCD 1;//32 in total
			stop;

		FuckYouFlash:
			HAMF ABCD 1; 
			HAMF DEFEDEFEDEFEDEFEDEFEDE 1; //22
			HAMF DCBA 1;
			stop;

		KickingFlash:
			HAMG ABCDDDDDDDDDDDDCBA 1;
			Goto Ready;
		AirKickingFlash:
			HAMG ABCDDDDDDDDDDDDCBA 1; //18
			Goto Ready;

		SlideKickingStart:
			HAMG ABCDD 1;
			HAMG DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD 1 { //39 total
				if (CountInv("Kicking") == 0) {
					return resolvestate("SlideKickingEnd");
				}
				return resolvestate(null);
			}
			Goto Ready;

		SlideKickingEnd:
			HAMG DDDDDDDCBA 1; //10
			Goto Ready;

		SprintOverlay:
			HAMG ABCD 1;
			Wait;

		ReturnfromSprint:
			HAMG DCBA 1;
			Goto ready;

		Select:
			TNT1 A 0;
			TNT1 A 0 A_SetCrosshair(41);
			Goto SelectFirstPersonLegs;
		SelectContinue: "####" A 0 A_GiveInventory("IsPlayingDoxMod",1); 
			UNHG A 0 A_takeinventory("disabletilting",1);
			TNT1 AAAAAAAAAAAAAA 0 A_Raise();
			TNT1 A 1 A_Raise();
		ReturnFromNothing:
			TNT1 A 0 A_SetCrosshair(41);
			TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
			TNT1 AAA 0;
			Goto SelectAnimation;

		SelectAnimation:
			TNT1 A 0 A_SetCrosshair(41);
			HAMS ABCD 1 A_WeaponReady(WRF_NOFIRE);
			GOto Ready;
			Deselect: 
				"####" A 0 A_TakeInventory("IsPlayingDoxMod",1);
				"####" A 0 A_ClearOverlays(-2,-2);
				HAMS DCBA 1;
				TNT1 A 0 A_StopSOund(1);
				TNT1 A 0 A_StopSOund(2);
				TNT1 A 0 A_StopSOund(6);
				TNT1 A 0 A_TakeInventory("TossGrenade", 1);
				TNT1 AAAAAAAAAAAAAAAA 0 A_lower();
				TNT1 A 1 A_Lower();
				Wait;
		Ready:
			HAMR A 1 A_weaponreadyDX(WRF_ALLOWRELOAD);
			LOOP;
		Fire:
			
			HAMR A  0 A_startsound("BDP/Weapon/Hammer/Swing",1,0,1.0);
			HAMR BCDEF 1
			{
				A_SetPitch(pitch-7, SPF_INTERPOLATE);
				invoker.owner.A_setangle(invoker.owner.angle-2.5,SPF_INTERPOLATE);
			}
			
			HAMR GGG 1
			{
				A_SetPitch(pitch-2.333, SPF_INTERPOLATE);
				invoker.owner.A_setangle(invoker.owner.angle-0.83333,SPF_INTERPOLATE);
				invoker.owner.vel.z = (invoker.owner.vel.z - 40);
			}
		FireHold:
		//	HAMR G 1;
			//TNT1 A 0 A_refire("firehold");
			HAMR HIJKMO 1
			{
				A_SetPitch(pitch+7, SPF_INTERPOLATE);
				invoker.owner.A_setangle(invoker.owner.angle+2,SPF_INTERPOLATE);
			}

			HAMR A 0
			{
				A_startsound("BDP/Weapon/Hammer/Impact",1);
				Radius_Quake(4,14,0,12,0);
				A_DoHammer(300,90,true,random(200,500));
				
				A_recoil3d(10);
				If(countinv("soulammo") < 30)
				{
					A_damageself(20,"desintegrate");
				}
				takeinventory("soulammo",30);
				//A_SetPitch(pitch-7, SPF_INTERPOLATE);
				A_SpawnItemEX("WhiteShockwaveSmall",cos(pitch)*64,0,32 -(sin(pitch)*64));
				A_SpawnItemEX("BDExplosionParticlesRED",cos(pitch)*64,0,32 -(sin(pitch)*64));
				for (int i = 15; i > 0; i--)
				{
					A_fireprojectile("explosionparticleREDveryfast",frandom(-25,25),0,0,0,0,frandom(3,-25));
				
				}
			}
			HAMR PQ 1;
			HAMR RRRRRRRRRRRRRR 1 A_WeaponOffset( random(3,-3) , 32+random(3,-3), 0);
			HAMR R 10;
			//TNT1 A 0 A_refire("firehold");
			TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
			HAMB ONMLKJIHEDCBA 1;
			Goto ready;
			
			
		AltFire:
			HAMR A  0 A_startsound("BDP/Weapon/Hammer/Swing",1,0,1.0);
			HAMG EFGHIJK 1;
			HAMR A 0
			{
				A_startsound("GRBRFIRE",12);
				If(countinv("soulammo") < 10)
				{
					A_damageself(3,"desintegrate");
				}
				takeinventory("soulammo",10);
				A_dohammer(200,45,true,random(50,100),"ExtremePunches");
				A_recoil3d(40);
			}
			HAMG O 2 A_ZoomFactor(0.96);
        HAMG P 2; //A_FireProjectile("GreenFlareSpawn",0,0,0,0);
		TNT1 A 0 A_SetPitch(Pitch-8, SPF_INTERPOLATE);
		HAMG Q 1;
		BFGN A 0 A_ZoomFactor(0.98);
		HAMG R 1;
        BFGN A 0 A_ZoomFactor(1.0);
		//BFGA F 1;
		HAMG STKKKKKKKK 1 A_SetPitch(Pitch+0.8, SPF_INTERPOLATE);
		HAMG K 10;
		//TNT1 A 0 A_JumpIfInventory("NoFancyShooting", 1, 10);// For poor PCs
		//BFGN GHIGHI 1
		//{
		//	A_overlayoffset(overlayid(),frandom(-1,0),frandom(32,33));
		//}
		TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
		HAMG JIHGFE 1;
		Goto ready;
		
		
			 DualWield:
		TNT1 A 0 A_takeinventory("startdualwield",1);
		HAMR A  0 A_startsound("BDP/Weapon/Hammer/Swing",1,0,1.0);
		HAMG EFGHIJK 1;
		//HAMR A 0 A_stopsound(1);
		//TNT1 A 0 A_jumpifinventory("ammocell",1,1);
		//Goto noammo;
		TNT1 A 0
		{
		 A_checkgrab(200,45);
		 If(invoker.grabbedactor)
			{
			invoker.previousmissile = invoker.grabbedactor.bmissile;
			invoker.previoussolid = invoker.grabbedactor.bsolid;
			invoker.previousgravity = invoker.grabbedactor.bnogravity;
			invoker.previousxy = invoker.grabbedactor.bforcexybillboard;
			invoker.previousfriend = invoker.grabbedactor.bfriendly;
			invoker.grabbedactor.giveinventory("grabbedmonsterdamage",1);
			invoker.grabbedactor.giveinventory("grabbedmonsterdamage",1);
			invoker.grabbedactor.bsolid = FALSE;
			invoker.grabbedactor.bmissile = FALSE;
			invoker.grabbedactor.bnogravity = TRUE;
			invoker.grabbedactor.bforcexybillboard = TRUE;
			invoker.grabbedactor.bfriendly = TRUE;
			invoker.grabbedactor.bmissilemore = TRUE;
			invoker.grabbedactor.bnopain = TRUE;
			invoker.grabbedactor.blookallaround = TRUE;
			invoker.grabbedactor.bdontharmspecies = FALSE;
			invoker.grabbedactor.bdoharmspecies = TRUE;
			invoker.grabbedactor.target = null;
			invoker.grabbedactor.tracer = null;
			return resolvestate("grabloop");
			}
			return resolvestate(null);
		}
		Goto GrabDie;
		GrabShoot:
		tnt1 A 0
		{
		
			A_startsound("GRBRFIRE",12);
			A_startsound("GRBRFAIL",13);
			If(invoker.beam)
			{
				invoker.beam.destroy();
			}
			If(invoker.grabbedactor)
			{
			invoker.grabbedactor.bmissile = invoker.previousmissile;
			invoker.grabbedactor.bsolid = invoker.previoussolid;
			invoker.grabbedactor.bnogravity = invoker.previousgravity;
			invoker.grabbedactor.bforcexybillboard = invoker.previousxy;
			invoker.grabbedactor.bfriendly = invoker.previousfriend;
				If(invoker.grabbedactor.bmissile)
					{
					invoker.grabbedactor.giveinventory("grabberdamage",1);
					invoker.grabbedactor.pitch = invoker.owner.pitch;
					invoker.grabbedactor.angle = invoker.owner.angle;
					invoker.grabbedactor.species = "marines";
					invoker.grabbedactor.bthruspecies = true;
					invoker.grabbedactor.bmthruspecies = true;
					invoker.grabbedactor.setorigin((invoker.owner.pos.x,invoker.owner.pos.y,(invoker.owner.pos.z + (invoker.owner.height * 0.5))),FALSE);
					//invoker.grabbedactor.pos = invoker.owner.pos;
					//invoker.grabbedactor.pos.z = (invoker.grabbedactor.pos.z + (invoker.owner.height * 0.5));
					Invoker.grabbedactor.target = invoker.owner;
					invoker.grabbedactor.vel3dfromangle(invoker.grabbedactor.speed,invoker.grabbedactor.angle,invoker.grabbedactor.pitch);
				//	invoker.grabbedactor.a_recoil(-(invoker.grabbedactor.speed));
					//Invoker.grabbedactor.
					}
				Else
					{
					invoker.A_startsound("bonecrack",13);
					Radius_Quake(12, 24, 0, 60, 0);
					invoker.grabbedactor.takeinventory("grabbedmonsterdamage",1);
					invoker.grabbedactor.angle = (invoker.owner.angle - 180);
					invoker.grabbedactor.a_changevelocity(-20,0,20,CVF_RELATIVE);
					invoker.grabbedactor.damagemobj(invoker.owner,invoker.owner,frandom(100,170),"extremepunches");
					}
			invoker.Grabbedactor = null;
			}
			//Return resolvestate(null);
		}
		HAMG O 2 A_ZoomFactor(0.96);
        HAMG P 2; //A_FireProjectile("GreenFlareSpawn",0,0,0,0);
		TNT1 A 0 A_SetPitch(Pitch-8, SPF_INTERPOLATE);
		HAMG Q 1;
		BFGN A 0 A_ZoomFactor(0.98);
		HAMG R 1;
        BFGN A 0 A_ZoomFactor(1.0);
		//BFGA F 1;
		HAMG STKKKKKKKK 1 A_SetPitch(Pitch+0.8, SPF_INTERPOLATE);
		//TNT1 A 0 A_JumpIfInventory("NoFancyShooting", 1, 10);// For poor PCs
		//BFGN GHIGHI 1
		//{
		//	A_overlayoffset(overlayid(),frandom(-1,0),frandom(32,33));
		//}
		TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
		HAMG JIHGFE 1;
		Goto ready;
		GrabDie:
		tnt1 A 0
		{
			If(invoker.beam)
			{
				invoker.beam.destroy();
			}
			invoker.grabbedtimer = 0;
			A_startsound("GRBRFAIL",12);
			If(invoker.grabbedactor)
			{
			invoker.grabbedactor.takeinventory("grabbedmonsterdamage",1);
			invoker.grabbedactor.bmissile = invoker.previousmissile;
			invoker.grabbedactor.bsolid = invoker.previoussolid;
			invoker.grabbedactor.bnogravity = invoker.previousgravity;
			invoker.grabbedactor.bforcexybillboard = invoker.previousxy;
			invoker.grabbedactor.bfriendly = invoker.previousfriend;
			
				If(invoker.grabbedactor.bmissile)
					{
					invoker.grabbedactor.vel.xy = (0,0);
					invoker.grabbedactor.vel.z = -5;
					}
			invoker.Grabbedactor = null;
			}
			//Return resolvestate(null);
			If(invoker.killyourself)
				
			{
				//console.printf("KILLYOURSELF");
				A_damageself(100,"desintegrate");
				
			}
		}
		
		HAMG LMNLMN 1
		{
			A_overlayoffset(overlayid(),frandom(-1,0),frandom(32,33));
		}
		TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
		HAMG KJIHGFE 1;
		Goto ready;
		
	
	
		
	Grabloop:
		TNT1 A 0
		{
			If(invoker.owner.countinv("soulammo") <= 1)
			{
				A_damageself(1,"desintegrate");
			}
			Else
			{
				invoker.owner.takeinventory("soulammo",1);
			}
		}
		HAMG LMNLMNLMN 1
		{
			//invoker.grabbedtimer = invoker.grabbedtimer + 1;
			
			A_startsound("GRBRLOOP",12,CHANF_LOOPING);
			A_overlayoffset(overlayid(),frandom(-1,0),frandom(32,33));
			If(invoker.owner.health < 2)
					{
						invoker.killyourself = true;
					}
			If(player.cmd.buttons & bt_altattack || invoker.owner.findinventory("startdualwield") || invoker.killyourself)
				{
					invoker.owner.takeinventory("startdualwield",1);
					Return resolvestate("grabdie");
					
				}
			If(invoker.grabbedactor && invoker.grabbedactor.health > 0)
				{
				
			
					invoker.grabbedactor.reactiontime = 0;
					
					If(invoker.grabbedactor.target && invoker.grabbedactor.target == invoker.owner)
					{
						Invoker.grabbedactor.target = null;
					}
					
					FLineTraceData grabberlength;
					LineTrace(angle, (78 + (invoker.grabbedactor.radius * 0.7)), pitch, TRF_THRUACTORS, offsetz: player.viewz - pos.z, data: grabberlength);
					vector3 targetpos = grabberlength.HitLocation;
					
					//If(level.IsPointInLevel(targetpos))
					//{
						
						invoker.grabbedactor.SetOrigin(targetpos,true);
					//}
					
					
					if(!invoker.beam) 
					{
						invoker.beam = invoker.beam.Create(invoker.Owner, 5, 0, -2, 0, 2, type:"TenderizerLaser");
						invoker.beam.SetEnabled(true);
						invoker.beam.starttracking(invoker.grabbedactor.pos);
					}
		
					// Toggle laser
					//if( btns & BT_RELOAD && !(obtns & BT_RELOAD) ) 
					//	beam.SetEnabled(!beam.enabled);
		
					// Update laser if tracking target 
					if(invoker.beam.isTracking())
					{
						Actor aim = invoker.grabbedactor;
						if(aim) invoker.beam.targetPos = (aim.pos.xy, aim.pos.z + aim.height * 0.5);
					}
					//invoker.grabbedactor.angle = angle;
					/*
					if (!invoker.beam)
					{
						//tracer.giveinventory("bfgdamage",1);
						invoker.Beam = Spawn("TenderizerTendril", (targetpos));
						
					}
					Else
					{
						Vector3 ofs = invoker.owner.pos+(0,0,invoker.owner.player.viewz - invoker.owner.pos.z);
						Vector3 x, y, z;
						[x, y, z] = BDP_CoordUtil.getaxes(invoker.owner.pitch,invoker.owner.angle,invoker.owner.roll);
						vector3 newpos = (ofs+x*(3)-z*(0.7));
						invoker.beam.angle = (angle);
						invoker.beam.pitch = (pitch - 95);
						invoker.beam.scale.y = grabberlength.distance;
						invoker.beam.setorigin(newpos,true);
					}
					*/
							/*
							int warpoffset = ((invoker.grabbedactor.radius * 0.5) + (invoker.owner.radius * 0.5));
							//Vector3 warpdir = (AngleToVector(invoker.angle, cos(invoker.pitch)), -sin(invoker.pitch));
							//warpdir.x = (warpdir.x * warpoffset);
							//warpdir.y = (warpdir.y * warpoffset);
							//warpdir.z = (warpdir.z * warpoffset);
							//Warpdir = (invoker.owner.pos + warpdir);
						
							//invoker.grabbedactor.setorigin(warpdir,TRUE);
							Vector3 ofs = invoker.owner.pos+(0,0,invoker.owner.player.viewz - invoker.owner.pos.z);
							Vector3 x, y, z;
							[x, y, z] = BDP_CoordUtil.getaxes(invoker.owner.pitch,invoker.owner.angle,invoker.owner.roll);
							vector3 newpos = (ofs+x*(32 + (invoker.grabbedactor.radius * 0.7))-z*(invoker.grabbedactor.height * 0.6));
							//If(level.IsPointInLevel(newpos))
							//{
								//invoker.grabbedactor.angle = (invoker.owner.angle - 180);
								invoker.grabbedactor.SetOrigin(newpos,true);
							//}
							*/
					If(invoker.grabbedactor.distance3d(invoker.owner) > 300)
					{
						Return resolvestate("grabdie");
					}
				}
			Else
				{
					Return resolvestate("grabdie");
				}
				
			If(player.cmd.buttons & bt_attack)
				{
					invoker.owner.takeinventory("startdualwield",1);
					Return resolvestate("grabshoot");
				}
			return resolvestate(null);
		}
		//TNT1 A 0 A_takeinventory("ammocell",1);
		LOOP;
		
		SpecialAction:
			TNT1 A 0 A_takeinventory("swapriflespecial",1);
			TNT1 A 0 A_TryHammerTeleport();
		PlacePortal:
			HAMR A  0 A_startsound("BDP/Weapon/Hammer/Swing",1,0,1.0);
			HAMG EFGHIJK 1;
			TNT1 A 0
			{
				A_giveinventory("teleportertimer",100);
				FLineTraceData Portaldestination;
				LineTrace(angle, 64, pitch, TRF_SOLIDACTORS|TRF_THRUHITSCAN, offsetz: player.viewz - pos.z, data: portaldestination);
				vector3 targetpos = Portaldestination.HitLocation;
				
					let Destination = spawn("HammerPortal",targetpos);
					invoker.destination = destination;
					destination.angle = angle;
				A_startsound("Weapons/Unmaker/PlaceTeleporter",6);
				If(countinv("soulammo") < 30)
				{
					A_damageself(20,"desintegrate");
				}
				takeinventory("soulammo",30);
			}
			HAMG LMNLMNLMN 1;
			TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
			HAMG KJIHGFE 1;
			Goto Ready;

		Spawn:
			HAMP A 1;
			LOOP;

	}
	
}

Class HammerPortal : Actor
{
	Default
	{
	+NOBLOCKMAP;
	+NOGRAVITY;
	+NOTELEPORT;
	RenderStyle "Add";
	Alpha 0.0;
	Scale 0.0;
	+bright;
	+forcexybillboard;
	}
	States
	{
		Spawn:
	
		TNT1 A 0 NODELAY A_startsound("BDP/Weapon/Hammer/Portal",1,CHANF_LOOP,1.0,ATTN_NORM,0.0,frandom(0,1));
		HAMT ABCDCBABCDCB 1
		{
			A_fadein(0.10);
			scale.x = (scale.x + 0.02);
			scale.y = (scale.y + 0.02);
			spawn("HammerLightning",pos);
		}
		StaySpawned:
		HAMT ABCDCB 1
		{
			spawn("HammerLightning",pos);
			//spawn("HammerLightning",pos);
		}
		LOOP;
		Die:
		TNT1 A 0 A_startsound("BDP/Weapon/Hammer/Portal/Die",1);
		HAMT ABCDCBABCDCB 1
		{
			A_fadeout(0.20);
			scale.x = (scale.x - 0.03);
			scale.y = (scale.y - 0.03);
			spawn("HammerLightning",pos);
		}
		STOP;
	}
}

Class HammerLightning : Actor
{
	Default
	{
	+NOBLOCKMAP;
	+NOGRAVITY;
	+NOTELEPORT;
	+forcexybillboard;
	RenderStyle "Add";
	Alpha 1.0;
	//Scale 0.30;
	+bright;
	+rollsprite;
	}
	States
	{
		Spawn:
			TNT1 A 0 NODELAY
			{
				If(random(1,2) == 2)
				{
					bxflip = true;
				}
				roll = frandom(0,360);
				float scaletobe = frandom(0.30,0.50);
				scale = (scaletobe,scaletobe);
			}
			TNT1 A 0 a_jump(256,"Spawn1","spawn2","Spawn3");
		Spawn1:
			HAMT E 1;
			Goto StaySpawned;
		Spawn2:
			HAMT F 1;
			Goto StaySpawned;
		Spawn3:
			HAMT G 1;
			Goto StaySpawned;
		StaySpawned:
			HAMT "#" 1 A_fadeout(0.2);
			LOOP;
	}
	
}


Class TenderizerTendril : Tripmineparticle
{
	States
	{
		Spawn:
			TNT1 A 0;

			L2NR A -1 BRIGHT ;

			Stop;
	}
}
	
	